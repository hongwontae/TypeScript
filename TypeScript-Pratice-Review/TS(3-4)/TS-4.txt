** 클래스 메서드 본문의 변수 스코프는 지역 or 클래스 외부

1. 필드와 constructor
1-1. constructor는 생성자 함수가 실행될 떄의 로직이다.
=> 생성자 함수의 인수를 받아서 처리하거나 정의된 값을 주는 역할을 한다.

1-2. 외부 필드는 constructor의 key 역할을 한다.
=> 외부 필드에서 모두 정의하고 싶다면 default value를 줘야한다.

1-3. constructor의 매개변수는 value 역할을 한다.


2. class this
2-1. class 내부의 this는 생성된 객체를 바라본다.
2-2. 메서드의 매개변수에 this 바인딩을 할 수 있다. method(this : className){}
=> 해당 메서드의 this는 항상 className만을 바라본다.


3. public/ private 
3-1. public 
public의 프로퍼티는 언제 어디서나 접근할 수 있다.

3-2. private
private 클래스 내부, 클래스 메서드에서만 접근이 가능하다.


4. 약식 초기화
constructor의 매개변수에서 key-value을 모두 정의한다.


5. 읽기전용 속성
readonly을 붙이면 생성자 함수의 인수 초기화를 제외하고 값을 주거나 변경이 불가능하다.


6. 상속
6-1. extends 키워드로 하나만 상속이 가능하다.
6-2. 상속받은 클래스는 constructor에서 super를 호출해야 한다.
6-3. 자식은 부모의 모든 것을 받는다.


7. protected
자식은 부모의 프로퍼티에 접근할 수 있다.


8. 정의 후에 default 값 부여 가능


9. getter && setter
9-1. get getName(){}/ set setName(){}
9-2. 호출이 아닌 dot 표기법으로 접근만 한다.


10. 정적메서드, 정적 프로퍼티
10-1. 클래스에서 바로 사용이 가능한 메서드, 프로퍼티
10-2. 인스턴스에서 정적으로 접근가능


11. 추상클래스
11-1. 메서드 구현을 강제하는 것
11-2. abstract class name {
    name : string = 'hwt'
} => 추상 클래스에서는 프로퍼티를 선언하고 할당하여 추상 클래스를 extends하는 모든 클래스들에게 프로퍼티를 줄 수 있다.
=> constructor도 가능하다.


12. 인터페이스
12-.1 interce nema{}를 통해 구현한다.
=> 객체 클래스의 프로퍼티나 메서드의 블루프린트 역할

12-2. implements 키워드를 통해 여러개 구현가능
12-3. 접근제한자 사용불가
12-4. 상속가능

12-5. 선택적 매개변수
? => 구현해도 되고 안해도되는 키워드




