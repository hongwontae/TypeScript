1. 일반적인 JS는 실행전에 코드가 어떻게 동작할지 예상하기 어렵다.
=> 런타임에 에러를 알 수 있기 떄문이다.
=> JS는 동적 타입이다./ 변수의 타입은 런타임에 결정


2. Static type-checking
=> TS는 JS를 기반으로 한 정적 타입 언어이다./ 변수의 타입은 컴파일 타입에 결정
=> 실행 전에 유형 검사를 통해 에러를 방지할 수 있다.


3. Non-exception Failures
ts를 통해 존재하지 않는 프로퍼티의 접근, 오타, 호출되지 않은 함수, 기본적인 오류를 방지할 수 있다.


4. Types for Tooling
=> TS-IDE의 호환성이 좋아서 decre되거나 존재하지 않는 프로퍼티에 접근을 막는다.


5. Explicit Types(명시적 유형)/ Infer Types(추론적 유형)

5-1. 명시적 유형
function add(a : number,b : number){
    return a+b
}
=> 매개변수 a와 b는 들어오기 전까지 어떤 타입인지 ts가 추론적을 알 수가 없다. 이럴 떄는 type을 명시해야한다.

5-2. 추론적 유형
 let a = 'Ko' => value는 string이다. 이 떄 TS는 추론적으로 a가 string 타입이라는 것을 안다. 이럴 떄는 타입을 
명시하지 않아도 된다.


6. Erased Types (지워진 유형)
TS => JS로 컴파일 시점에 TS의 기능을 확인한 후에 JS 파일로 변환된다.
이 떄 JS는 TS의 타입, TS만의 기능은 JS에 존재하지 않는다.


7. Downleveling (하향 평준화)
tsconfig.json 파일에 TS => JS로 컴파일 할 떄 적용되는 ECMA 버전이 명시되어있다. 이를 수정할 수 있다.


8. use strict
=> TS는 use strict가 기본적으로 적용되어 있다. 해당 기능을 true라면 8-1, 8-2가 자동으로 true

8-1. noImplicitAny
=> tsconfig.json의 매개변수 타입 지정

8-2. strictNullChecks
=> tsconfig.json의 null과 undefined을 참조하는 것을 막는 기능
=> document.querySelector('button') ts는 button이 실제하는지 모른다. html을 읽지 않으니까
=> 잠재적으로 해당 코드는 null이 될 수 있다. 이를 에러로 나오게 한다.


