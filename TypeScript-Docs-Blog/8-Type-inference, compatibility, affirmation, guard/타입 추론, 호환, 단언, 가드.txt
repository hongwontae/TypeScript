1. 타입 추론
1-1. TS 컴파일이 알아서 타입을 할당하는 기능을 의미한다.
1-2. 초기화 변수, 기본값이 설정된 매개변수, 반환 값이 존재하는 함수의 리턴타입은 타입 추론 기능이 작동한다.


2. 타입 호환
2-1. 타입스크립트 코드에서 특정 타입 간에 구조가 비슷하면 타입 호환이 될 수 있다.

2-2. 구조적 타입 호환
=> a라는 변수는 let를 사용해서 객체를 생성하고 타입을 부여
=> b라는 변수는 let를 사용해서 객체를 생성하고 타입을 부여
=> 다만 b는 a의 타입을 전부 가지고 있으나 몇 개도 자신의 타입도 가지고 있다.
=> 이 떄 a에 b을 할당하면 에러가 발생하지 않는다. b는 TS에 의해 타입 검사를 받지 않기 떄문이다. 

2-3. 유니언 타입 호환
| => OR
& => and
=> or 속성일 떄 객체 타입이 모두 존재해도 true 판단을 내린다.
=> or는 하나만 선택임에도 불구하고

2-4. function 타입 호환
1. 함수 타입 A가 함수 타입 B로 할당 가능하기 위한 조건
=> A의 매개변수 개수가 B의 매개변수 개수보다 적어야 한다.
=> 같은 위치의 매개변수에 대해 B의 매개변수가 A의 매개변수로 할당 가능해야 한다.
=> A의 반환값은 B의 반환값으로 할당 가능해야 한다.

2-5. Class 타입 호환
=> 클래스 타입끼리 비교할 때 스태틱 멤버(static member)와 생성자(constructor)를 제외하고 속성만 비교한다.


3. 타입 단언 (컴파일러에 대한 형변환)
3-1. 타입은 내가 정의할게 맞다고 컴파일러에게 알려주는 것을 의미한다.
3-2. 더 이상 추론하지 않도록 직접 지시하는 것이다.
3-3. <> or as를 사용한다.


4. 타입 가드
4-1. 에러를 줄일수 있는 방어 코드 기법을 의미한다.
4-2. 매개변수 a : str | num 일 떄 함수 본문에서 a의 메서드는 str과 num이 겹치는 부분만 사용이 가능하다.
=> 이 떄 타입 가드 typeof을 사용해서 해결가능

4-3. Array.isArray(), typeof, instanceof, in 연산자, 인터페이스 식별자.. 등을 통해서 타입가드 문을 생성할 수 있다.