1. TS의 Interface
1-1. 객체의 스펙(속성과 속성의 타입)
1-2. 함수의 파라미터
1-3. 함수의 스펙(파라미터, 반환 타입 등)
1-4. 배열과 객체를 접근하는 방식
1-5. 클래스


2. interface vs type-alias
2-1. 객체의 타입을 지정할 떄 비슷하게 적용된다.
2-2. call-signature을 지정할 떄도 비슷하게 적용된다.


3. Interface 호환
같은 이름의 인터페이스를 여러 개라면 선언된 프로퍼티가 하나로 합쳐진다.


4. Interface extends
4-1. extends 키워드를 사용하여 가져오면 and 조건이 붙어지는 Interface가 되는 것이다.
4-2. extends 키워드를 사용해서 여러개의 interface를 붙일 수 있다.
4-. type은 이를 Intersection type &을 사용해서 구현한다.


5. Interface 함수 타입
5-1. 인터페이스는 함수의 타입을 정의할 때에도 사용할 수 있다.
5-2. Call Signature를 정의할 떄 Inferface를 사용을 의미하는 것이다.
5-3. 인터페이스를 함수 자체 타입을 정의할때 다음과 같이 함수 속성 값도 정의할수 있다. => 함수 자체가 객체이기 떄문이다.
=> 속성 값 정의할 떄는 ?와 함께 사용한다.


6. 인덱스 타입
6-1. 인터페이스에 프로퍼티 규칙을 정하는 것이다.
6-2. interface Rule{
    [user : string] : string
} => Rule이 할당된 객체의 프로퍼티는 키는 string, value도 string이어야 한다.

