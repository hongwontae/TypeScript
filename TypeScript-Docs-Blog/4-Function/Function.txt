1. function
1-1. 함수의 매개변수 모두 타입을 지정해야 한다. (추론적으로 타입을 알 수 없다.)
1-2. 반환 타입을 지정할 수 있다. (추론적으로 알 수 있지만 강력한 타입지정을 위해 설정할 수 도 있다.)
1-3. 일반적인 함수를 정의하는 방법은 3가지 => 함수 선언문, 함수 표현식, 화살표 함수
1-4. promise 타입이 존재한다.
=> async function lll() : promise{...};

1-5. 익명 함수
=> JS func, 브라우저 함수의 경우 매개변수가 정해져있기 떄문에 타입지정할 필요없다.
=> 컨텍스트 타이핑이라고 한다.


2. 함수 타입 지정

2-1. Function Type Expressions
(a,b...)=> return Type/ (a : number, b : number) => void

function consoleLog(a,b,cb:(a : number, b : number) => void){
    cb(a,b)
}

2-2. Call Signatures
1. type, interface 키워드를 이용한다.
2. {} 내에서는 => 대신 :을 사용한다. 
3. call Signatures 앞에 new 키워드 추가하여 생성자 함수로 기능하게 할 수 있다.
4. call Signatures는 함수 타입을 구현하는 방법임으로 다른 방향성을 가질 수 없다.

*** 함수 선언문에 직접적으로 타입 선언은 불가, 함수 표현식에만 직접적으로 타입 선언 가능
=> 매개변수, 함수 표현식에만 사용가능

*** Call Signatures는 type name = {
    (a : number) : void;
    (b : string) : void
} 처럼 구현 가능, 이 떄는 매개변수 타입을 두 개로 지정해야 한다.

=> type이나 interface나 call Signatures를 구성하여 함수를 만들면 TS가 이를 인식한다.
=> {() : type}이 존재하면 이는 무조건 함수 타입을 규정한다는 뜻으로 인식한다.
=> 다른 속성을 추가하면 함수 객체의 프로퍼티가 된다.


3. 선택적 매개변수 ? 
매개변수 뒤에 ?를 사용해서 없을 수 도 있음을 알려준다.


4. 함수 오버로드
4-1. 함수문 위에서 함수의 매개변수와 리턴값을 규정하는 문법을 의미한다.
4-2. function FnName(args, aggs..) : return-Type => 함수 오버로드 구성식
4-3. TS가 스스로 반환값을 식별할 수 없을 떄 많이 사용한다.
=> 매개변수에 따른 반환값을 식별할 수 없을 떄!!


5. this 매개변수
5-1. 첫 번쨰 매개변수로 this:object를 선언하면 this의 바인딩을 설정하는 것이다.


