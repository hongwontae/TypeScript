1. TypeScript의 타입검사는 tsconfig.json 설정을 따릅니다.

2. strict : true 
2-1. 엄격한 타입검사들을 활성화하는 플래그입니다.
2-2. strictNullChecks 
=> 값이 null이나 undefined일 경우 해당 타입이 null이나 undefined를 취해야 합니다.

2-3. strictPropertyInitialization 
=> 클래스의 모든 속성이 생성자에서 초기화되었는지 검사합니다.

2-4. noImplicitAny 
=> 변수나 매개변수가 암묵적으로 any가 되지 않도록 검사합니다. (any 타입 자체는 허용)

2-5. noImplicitThis
=> 함수에서 this가 암시적으로 any로 추론되는 것을 방지합니다.


3. taget/module
3-1. target
=> 컴파일 결과의 JS 버전을 지정합니다. ES5이라면 EMCAScript 5 표준에 맞게 컴파일 됩니다.
3-2. module
=> 사용할 모듈 시스템을 지정합니다. commojs(require/ module), esnext(import, export)


4. allowJs
=> TS 컴파일러가 .js 파일을 읽고 프로젝트에 포함시키며, 이를 TS 타입 검사 및 컴파일 과정에 통합할 수
있습니다. (즉, TS 컴파일 과정에 추가되는 것 뿐입니다. checkJs를 통해 타입 검사를 받을 수 있습니다.)

5. checkJs
=> JavaScript 파일에 타입 검사를 적용할 수 있습니다.
=> JS 파일에는 TS의 타입 설정을 할 수 없어 @Params, @Returns...로 설정하여 타입을 설정 합니다.


6. outDir/ rootDir
6-1. outDir 
=> 컴파일된 JS 파일을 저장할 디렉토리를 지정합니다.
6-2. rootDir
=> TS 파일의 기본 경로를 지정하여 프로젝트 구조를 유지하도록 도와줍니다.


7. noImplicitAny
=> 명시적으로 타입을 지정하지 않은 변수, 함수 매개변수, 함수 반환값.. 에대해 any 타입을 허용하지 않도록 합니다.
=> 타입이 지정되지 않은 변수에서 경고를 발생시킵니다.


8. noImplicitReturns
=> 반환값이 누락되는 경우 경고를 발생시킵니다.


9. typeRoots/types
9-1. typeRoots
=> 타입 정의 파일을 찾을 디렉터리를 지정합니다.
9-2. types
=> 포함할 타입 정의 패키지를 지정합니다.


10. esModuleInterop
=> CommonJS 모듈을 ES 모듈처럼 불러올 수 있도록 합니다. JavaScript의 require 구문으로 
작성된 모듈들을 import 구문을 통해 쉽게 가져올 수 있습니다.


11. resolveJsonModule
=> .json 파일을 TypeScript에서 직접 불러올 수 있습니다.


12. compilerOptions
=> TS 파일을 JS 파일로 컴파일하는 동작을 제어합니다.
