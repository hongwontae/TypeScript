1. Generics
1-1. 호출시점에 타입을 지정할 수 있도록 하는 기능입니다.
1-2. T라는 변수를 함수 이름 뒤에 <T>로 붙이고 이 타입을 함수 타입을 정의할 떄 사용할 수 있습니다.

1-3. Example
=> function getFirstElement<T>(arr : T[]) : T {
    return add[0]
}

1-4. Generics Class
=> 클래스 이름 뒤에 <T>를 붙여서 선언하고 해당 T를 호출시점의 타입으로 유연한 사용이 가능해집니다.

1-5. Example
=> Class Stack<T>{
    private items : T[] = [];

    push(item : T) : void {
        this.items.push(item)
    }

    pop() : T | undefined {
        return this.items.pop();
    }

}

1-6. Generics Interface
=> 인터페이스 이름 뒤에 변수를 붙여서 사용할 수 있습니다.


1-7. Generics Constaints
=> 제네릭 변수와 extends 키워드와 중괄호를 사용해서 제약조건을 걸 수 있습니다.
=> keyof 제약조건 : <T, K extends keyof T> => K가 T 타입의 키들 중 하나여야 한다는 제약조건입니다.

1-8. Example
=> function logLength <T extends {length : number}>(item : T) : void {
    console.log(item.length)
}


2. 직접 정의하는 제네릭 vs 이미 정의된 제네릭
2-1. 직접 정의 제네릭 => 타입 매개변수를 추가하여 동적인 정의를 할 수 있게 만듭니다.

2-2. 정의된 제네릭 => TypeScript 표준 라이브러리나 외부 패키지에서 미리 정의된 제네릭입니다.
해당 타입을 사용할 떄는 타입 매개변수만 정하면 됩니다.
ex) Promise는 제네릭으로 이미 설계된 타입입니다.
interface Promise<T> {
    ...
} => Promise<Todo>로 사용하면 됩니다.
