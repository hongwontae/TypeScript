1. interface
1-1. 객체나 클래스의 구조를 정의하는데 사용합니다.

1-2. 객체 타입 정의
=> interface obj2 {
    name : string;
    age : 20
}

1-3. 선택적 정의 (속성을 선택적으로 만들 수 있게 해줍니다. 속성 뒤에 ?를 사용합니다.)
=> interface opObject {
    name : string;
    age? : number
}
=> kkk : opObject = {
    name : 'HWT'
}

1-4. 읽기 전용 속성 (객체를 생성한 후에는 해당 속성을 수정할 수 없습니다. readonly 키워드 사용합니다.)
=> interface Person {
  readonly name: string;
  age: number;
}
=> let person : Person = {name : 'HWT', age : 20}
=> person.name = 'HHHH' (불가능)

1-5. 메서드 정의 (매개변수 타입과 반환타입을 지정해야 합니다.)
=> 이 떄 메서드 시그니처로 함수를 정의할 수 있습니다.
=> 일반 메서드 정의와 차이점은 this의 차이입니다. (화살표 함수의 this는 상위 스코프 this를 가르킵니다.)
=> 메서드 시그니처 정의 : interface Person {name : 'STR', greet() : void}; (메서드이름() : 반환타입)
=> 일반 메서드 정의 : interface Person {name : 'HST', greet : ()=>void}

1-6. 인덱스 서명
=> 객체가 동적 속성을 가질 수 있도록 허용합니다.

※ 인덱스 서명을 통해 다수의 키값을 정의할 수 있고 값도 정의할 수 있습니다.
=> interfaec ppp {
    [index : number] : {age : number, name : string}
}
=> [{age : 1, name : 'baby'}, {age : 2, name : 'hwt'}]...
=> {1 : {age : 1, name : 'aaa'}, 2 : {age :20, name : 'HWT'}};

1-7. interface extends
=> 다른 인터페이스를 확장(상속)할 수 있습니다.
=> 즉, 자식이 부모를 받으면 부모의 속성과 메서드 정의를 사용할 수 있습니다.

1-8. 인터페이스와 클래스
=> 클래스는 인터페이스를 implements 할 수 있습니다.
=> 클래스가 인터페이스를 implements하면 클래스는 강제로 구조를 따라야 합니다.

1-9. 함수 타입 정의
=> 함수 타입을 정의하는데 사용될 수 있습니다.
=> 함수 시그니처라고 부르기도 합니다.

※ 기본 구조
interface functionExample {
    (para1 : number, para2 : string) => string
}
=> 인터페이스나 타입 키워드를 통해 함수 타입을 정의하면 함수 표현식에만 부여할 수 있습니다.
=> 함수 선언문은 직접 타입을 작성해야만 합니다.

2. Interface VS Type
=> 인터페이스는 구조와 관련된 정의/ 타입은 더 유연한 정의
