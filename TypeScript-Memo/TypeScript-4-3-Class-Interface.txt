1. 인터페이스
정의 : 객체의 구조를 의미한다.

특징
1-1. 정의하지만 값을 할당할 수 없다.
1-2. interface interfaceName{
    ...
}
1-3. {name : string, age : number}/ age : number = 20은 할당이라 인터페이스에서 불가능
1-4. 메서드 정의할 떄 본문은 없고 매개변수, 반환타입 두 개만 지정한다.


2. 클래스와 인터페이스 사용하기
2-1. 객체의 타입을 정의할 떄는 커스텀 타입보다 인터페이스가 더욱 명확하다.
2-2. 클래스 안에 인터페이스를 구현할 수 있다.
2-3. className 앞에 implements 키워드를 사용하고 IFName을 작성하면 class는 interface를 구현해야 한다.
2-4. 쉼표를 통해 여러개 인터페이스 구현이 가능하다.
2-5. 인터페이스를 타입으로 규정해도 된다.


3. 읽기 전용 인터페이스 속성
3-1. 접근 제한자는 인터페이스에서 사용불가
3-2. readonly 키워드는 가능 => 해당 프로퍼티는 한 번만 설정할 수 있도록 제한되고 수정 불가능하게 된다.


4. 인터페이스 상속
4-1. 인터페이스에서도 상속이 가능하다.
4-2. 자식 인터페이스에서 extends를 사용하여 상속받고 implements된 클래스에서는 부모-자식을 모두 구현해야 한다.
4-3. 여러개의 인터페이스를 상속할 수 있다.


5. 함수 타입 인터페이스
5-1. 인터페이스 안에서 메서드 이름을 제외한 메서드 축약법으로 함수를 정의하면 된다.
5-2. ex) interface AddFn{
    (a : number, b : number) : number
}


6. 선택적 매개변수 & 속성
6-1. 인터페이스 안에서 프로퍼티+메서드를 정의할 떄 이름 뒤에 ?를 추가해서 구현하는 클래스가 선택적으로 구현하도록 할 수 있다.
6-2. 클래스, 인터페이스, 생성자 인수, 메서드(함수)에 ?(선택적 프로퍼티 키워드)를 사용할 수 있다.


7. JS - Interface
TS => JS로 컴파일 될 떄 인터페이스는 변환되지 않는다.
=> 런타임에는 인터페이스 작동하지 않는다.