1. First Class Decorator
1-1. tsconfig.json => ,"experimentalDecorators": true 설정해야 한다.

1-2. decorators는 function이다./ 함수 이름의 첫 문자는 대문자로 설정한다.
1-3. @functionNane => 데코레이션 만드는 방법
1-4. 데코레이터는 클래스가 인스턴스화될 떄가 아니라 정의될 떄 실행된다.
=> 더 자세히는 클래스 정의와 생성자 함수 정의를 만난 시점에 실행된다.
1-5. 데코레이션의 위치는 클래스 정의 바로 위이다.
ex) @Decoration
    class Person{
    ....
};
1-6. decoration은 이 떄 자동으로 생성자 함수를 받는다. (클래스를 받는다.)
=> 해당 생성자 함수를 사용하고 싶다면 타입을 any로 지정해줘야한다. Function은 일반함수로 생각하기 떄문이다.


2. Decorator Factory
decorator의 매개변수, 인자를 넣고 싶다면

ex) function add(logging){
    return function(constructor : Function){
        console.log(logging);
        console.log(constructor);
    }
}
=> 이런 형식을 Decorator Factory라고 한다.
=> return function이 decorator가 되는 것이다.


3. Multi-Decorator
3-1. 데코레이터를 사용할 수 있는 곳이라면 1개 이상의 Decorator를 추가할 수 있다.
3-2. 데코레이션 함수의 실행순서는 제일 밑에 있는 데코레이션부터이다.
3-3. but 팩토리의 리턴 전 내부 코드 실행 순서는 순서대로이다.


4. 속성 Decorator
4-1. class의 프로퍼티에 데코레이터를 추가할 수 있다.

4-2. 이 떄 데코레이터는 2개의 매개변수가 들어온다.
=> 첫 번쨰 매개변수는 생성자 함수의 prototype 객체이다.(.prototype)(정적 프로퍼티일 경우 생성자 함수),
두 번쨰 매개변수는 프로퍼티 이름(string or symbol)
=> console.log(target === ProductLine.prototype)

4-3. 해당 데코레이터는 클래스 정의가 등록되는 시점에 실행된다.


5. 접근자 & 매개변수 데코레이터
5-1. getter, setter;
5-2. 매개변수로 프로토타입, 프로퍼티 이름, getter/setter 설명자 객체

5-3. 메서드 데코레이터
=> 매개변수로 프로토타입, 프로퍼티 이름, 해당 메서드 설명자 객체

5-4. 매개변수 데코레이터
=> 매개변수 위가 아닌 옆에 사용한다, function add(a,@Log4 b:number){...};
=> 데코레이터의 매개변수로 프로토타입, 매개변수을 사용하고 있는 메서드 이름, 매개변수 위치를 반환한다.


6. Decorator 실행시점
6-1. 인스턴스를 생성하지 않아도 deco는 실행된다.
6-2. 데코레이터는 클래스를 정의하는 시점에 실행된다.


7. Decorator return value
*** constructor에서 자식이 super를 호출하면 부모의 프로퍼티를 전부 상속받는 것이다.
*** => 이떄 이미 정의된 프로퍼티는 단순히 받아버리고 생성자 함수가 호출될 떄 초기화되는 프로퍼티는 super의 인자로 넘겨줘야한다.

7-1. 데코레이션에서 return 되는 값
=> 클래스에 붙인 deco의 함수의 반환값은 생성자 함수(class)를 대체할 새로운 함수를 반환할 수 있다.
=> 새로운 함수로 데코레이터가 추가된 대상 클래스를 대체할 수 있다.
=> 이러한 방식이되면 생성자 함수가 호출될 떄 해당 데코레이터가 모든 것을 대체하여 실행된다.

7-2. deco의 return 값을 사용하기 위해서는 decoFunc에 제네릭 처리를 해야한다.
{new} => 제네릭에서 생성자 함수를 뜻한다. {new(...args : any[])}

{new(...args : any) : {name :..., age : ...}}
=> 생성자 함수의 객체 타입을 정할 수 있다.

=> function generics<T extends {new(...arg : any) : {....}}>(a : T){
    ...
} => 인자는 생성자 함수이고, 객체형식은 : 뒤를 지켜라


8. 기타 Decorator 반환 타입
8-1. 속성 Deco, 매개변수 Deco return value값이 사용되지 않는다.

8-2. 접근자, 메서드 데코레이터의 return은 새로운 설명자 객체를 반환할 수 있다.
=> 반환된 새로운 설명자 객체가 실행된다.
function setterDeco(target : any, name : string, desc : PropertyDe..) : ProprtyDe..{
    ...
    return {
        get: ...,
        set : ...
    }
}










