1. types
1-1. number-type : 숫자 타입은 하나 뿐이다. 정수, 소수.. 등등
1-2. string : 문자열을 나타내는 타입 ('', "", ``)
1-3. boolean : true/false
1-4. 타입스크립트의 원시 타입은 모두 소문자이다.

1-5. 함수의 매개변수에 타입을 할당할 수 있다.
1-6. 함수의 매개변수에 (variable : type, variable2 : type) 형식으로 타입을 할당해줄 수 있다.
=> 이 떄 함수의 타입이 아닌 인수가 들어가면 tsc => js로 컴파일할 떄 에러가 발생한다.


2. TypeScript Type vs JS Type
TypeScript는 정적 타입이고 JavaScript는 동적 타입이다.

JS를 통해 에러를 검증하는 코드를 구현할 수 있다. 런타임에 JS의 로직을 통해 타입검사나 에러 파악가능
그러나 타입스크립트를 사용하면 컴파일 과정에서 막을 수 있고 빠르게 버그를 고칠 수 있다.


3. 타입 할당 및 타입 추론하기
타입 추론 => 상수나 변수에 어떤 타입을 사용했는지 TS가 인식하는 기능

변수나 상수에 선언과 할당을 동시에 할 떄 TS 타입을 넣을 수 있지만 불필요하다.
=> TS는 타입추론 기능이 뛰어나기 떄문에 이미 알고 있기 떄문이다.
=> 다만 선언만 했을 경우는 ts 타입 선언이 유용할 수 도 있다.


4. Type Object
4-1. {}, object를 통해 객체 타입을 할당할 수 있다.
4-2. ex) const hwt : {
    name : string;
    age : number,
    area : string
} = {
    name : 'hwt',
    age : 3000,
    area : 'Korea'
}
4-3. 선언+할당할 떄는 ts가 추론하도록 남겨두는게 효율적이다.


5. Type Array
5-1. : string[] : : number[] => arr 타입 할당
5-2. ex) let sports : string[]; sports : ['soccer','football','like'];
5-3. TS는 정적 타입 언어이기 떄문에 해당 변수의 타입을 정확히 알고 있기에 IDE 지원이 확실하다.


6. Type Tuple
6-1. 고정 길이 + 고정 타입을 의미한다.
6-2. const role : [number, string] = [1,'HWT']
 => role 상수는 2개의 값 + 첫 번쨰 값 number/ 두 번쨰 값 string을 갖는다.


7. Enum
7-1. 열거된 목록을 제공한다.
7-2. 읽기 전용 프로퍼티이다.
7-2. 식별자가 필요할 떄 많이 사용한다.
7-3. enum enumName {
    식별자 : value, 식별자 : value, 식별자 : vaule
 } => 식별자의 값을 변경하려면 enum 객체 내에서만 가능하다.


8. Any
8-1. 어떤 종류의 값이든 저장될 수 있는 타입
8-2. 타입스크립트의 장점을 전혀 사용하지 못하기 떄문에 특정 상황에서만 사용하는 것이 좋다.



