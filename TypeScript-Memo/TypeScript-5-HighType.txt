1. 인터섹션 타입 (교차타입)
* Date 타입이 존재한다. => JS Date 객체를 사용하는 타입이라는 것

1-1. type을 지정하는데 &를 사용해서 여러 개의 type을 차용한다.
=> type sss = {...}/ type cool = {...}
=> type sssCool = sss & cool 

1-2. |, &을 사용해서 type을 구현할 수 있다.


2. 타입 가드에 대한 추가 정보 (함수 오버로딩은 리턴값을 ts가 규정 못했을 떄 사용)
타입 가드 : 유니언 타입의 유연성 이점을 활용하면서도 런타임에 타입을 증명하는 방법
인자에 대한 타입 판단을 위해서 자주 사용된다.
typeof, in, instanceof 키워드를 타입 가드로 사용한다.

* instanceof 왼쪽의 객체가 오른쪽의 클래스로부터 파생되었는가? ture/false로 나타낸다.
=> 인터페이스나 객체 리터럴로 정의되었다면 instanceof 불가능


3. 구별된 유니언
interface 안에서 식별자 : value를 넣어서 객체에 할당시킬 수 있다.
=> type이라는 식별자를 유니언 타입들에 넣고 사용하면 swtich-case로 분기시켜 원하는 데이터 취합이 가능하다.


4. 형 변환
정의 : 어떤 값이 어떤 타입인지를 타입스크립트에게 알려준다.

4-1. TS는 HTML를 읽지 않는다.
=> DOM을 불러올 떄 타입 추론의 타입이 불안정하다.
=> 이 떄 형 변환 처리를 통해서 타입을 확정짓는다.

4-2. 형 변환 처리 구문은 두 가지이다.
1. 값 앞에 <>를 이용해서 형을 지정한다.
=> const userInput = <HTMLInputElement>document.getElementById('user-input');

2. 값 뒤에 as을 이용해서 형을 지정한다.
=> const userInput = document.getElementById('user-input') as HTMLInputElement;


*** 값 바로 뒤 !는 절대 null이 아님을 알려주는 것이다.


5. 인덱스 속성
5-1. interface에 추가하는 속성 정의이다.
5-2. key : value가 무엇이 들어올지 모르는 상황에서 유연하게 타입을 지정한다.

ex) interface ErrorContainer = {
    [prop : string] : string
}

const errorBag : ErrorContainer = {
    error : 'This is Error'
} => key는 문자열이고 해당되는 값도 문자열로 이루어져야 한다.


6. funtion 오버로딩
=> 함수의 인자에 따라 반환되는 타입이 다를 떄 타입스크립트가 자동으로 반환타입을 알지 못한다.
=> function name (args : type, args : type) : type => 함수 오버로딩을 통해 result들을 나열한다.


7. 옵셔널 체이닝
?.을 사용해서 객체의 프로퍼티 유무를 확인한다. 프로퍼티가 존재하지 않으면 실행하지 않는다.


8. Null 병합 연산자 ??
a ?? b => a가 null이나 undefined라면 b를 사용(할당)해라.

 

