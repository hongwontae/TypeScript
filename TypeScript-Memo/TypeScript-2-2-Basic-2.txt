1. 유니언 타입
1-1. 변수나 상수, 매개변수의 값의 타입을 여러개 지정하는 할 떄 사용하는 타입
1-2. | 하나를 사용한다. => let a : number | string = 5('hwt')
1-3. typeScript는  유니언 타입을 바라볼 떄 어떤 타입들이 들어가는지 정확히 분석하지 않는다.
=> 의도하지 않은 IDE 에러가 발생할 수 있다. 


2. 리터럴 타입
2-1. 타입을 더욱 구체적으로 명시하기 위해 값을 설정하는 것을 의미한다.
2-2. const a : 'as-text' | 'as-number' | 'as-boolean'
=> a는 string type + 위의 3개의 문자열만 허용가능하다.
=> 리터럴 타입 + 유니언 타입을 같이 사용한 것이다.


3. 타입 Alias(사용자 지정 타입)
3-1. 타입을 생성하여 사용할 수 있다.
3-2. Type 키워드를 사용하여 커스텀 타입을 만들 수 있습니다.
3-3. 유니언 타입, 객체 타입 등등을 만들 수 있습니다.


4. 함수 반환 타입 및 무효
4-1. 함수의 반환 타입을 지정할 수 있다.
4-2. function add (n1 : number, n2 : string) : string{return n1 + n2};
=> 매개변수 괄호 다음 콜론을 사용하여 지정한다.
4-3. 특별한 반환 타입인 void가 존재한다. 이는 반환 구문이 없다는 것을 의미한다. return이 없다는 것이다.
=> void는 기술적으로 undefinded을 반환한다.
4-4. undefined 타입 또한 타입으로 사용할 수 있다.

*** function이 undefined 타입이라면 return undefinded을 반환해야 합니다.
*** void는 function return 문이 없거나 return;만 가능합니다.


5. 타입의 기능을 하는 함수
5-1. Function type이 존재한다. let aaa : Function;
=> 해당 변수는 함수만 받아들인다.

5-2. 화살표 함수을 이용해서 사용자 지정 함수 타입을 만들 수 있다.
ex) let cc1 = () => number; => cc1는 매개변수는 없고 반환 타입은 number이다.
ex) let cc2 = (a: number, b : number) => number; => cc2는 매개변수 2개, 2개는 number 타입, 반환타입은 number이다.


6. 함수 타입 및 콜백
6-1. 콜백함수의 매개변수 타입과 개수에 엄격하지만 반환 타입은 크게 상관하지 않는다.
6-2. 매개변수의 콜백 함수 또한 함수 타입을 화살표 함수로 지정해 줄 수 있다.

*** 호출하는 곳에 타입지정 x/ 매개변수에 타입지정하는 것이다.


7. unknown Type
7-1. 모든 값을 받을 수 있지만 사용하기 전에 타입 검사를 해야 되는 타입입니다.   
=> typeof나 타입가드를 사용해서 안전하게 값을 처리해야 합니다.


8. Never Type
=> 절대 값을 반환하지 않는 함수나 변수를 나타내는 타입입니다.
=> 함수가 정상적으로 종료되지 않는 경우, 예외를 던지는 경우, 무한 루프..
=> function throwError() : never{
    throw new Error('..')
}


