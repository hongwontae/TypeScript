1. 상속

1.1. class 클래스명 extends 상속할 클래스{
    ...
} => 상속할 클래스는 1개만 가능하다.

1-2. 상속받은 클래스는 생성자를 별도로 생성하지 않으면 상속할 클래스의 생성자 함수를 사용한다.

1-3. 상속받은 클래스의 생성자를 정의할 떄 super를 호출해야 한다. super => 부모 클래스의 생성자이다.
=> super를 호출한 이후에 생성자 함수에서 this 작업을 해야한다.

1-4. constructor에서 정의하지 않은 프로퍼티라도 생성자함수가 생성될 떄 객체에 추가된다.


2. 속성 및 보호된 수정자 재정의
2-1. protected 프로퍼티는 상속받은 클래스에서는 프로퍼티에 접근이 가능하도록 한다.

2-2. 자식 클래스는 부모 클래스의 메서드를 오버라이딩하여 재정의할 수 있다.

2-3. public => 어디서 접근하든 상관없다
2-4. private => 해당 클래스의 객체에서만 접근가능
(private으로 설정되면 private 프로퍼티를 사용하는 메서드가 존재해야 한다.)
2-5. protected => 해당 클래스 + 상속한 클래스에서만 접근가능


3. 매개변수의 default value
모든 정의후에 = 1, [], {}..등을 통해 default 값 지정 가능


3. getter, setter

3-1. getter
정의 : 어디에서나 값을 return 해주는 메서드이다.

특징
1. get getName(){
    return value
} => 로직의 마무리는 항상 값을 return 해야 한다.

2. getter을 부를떄는 호출하는 것이 아니다. dot 표기법을 활용하여 접근만 하면 된다.
ex) const obj = new ob(1,2); obj.set; => 2


3-2. setter
정의 : 프로퍼티의 값을 변경할 떄 사용하는 특수 메서드이다.

특징
1. set setName(value : 'string'){
    this.reports : value;
} => 해당 객체의 값을 변경한다.

2. setter는 호출하는 것이 아닌 dot 표기법으로 접근한 이후 할당해야한다.


4. 정적 메서드 & 속성
4-1. 정적 프로퍼티는 클래스의 인스턴스를 통해 접근하지 않더라도 사용할 수 있는 프로퍼티이다.
(new를 사용하지 않고 클래스채로 사용이 가능하다.)

4-2. 정적 프로퍼티와 인스턴스 프로퍼티는 서로 접근할 수 없지만 인스턴스 메서드에서 클래스명.static를 사용하면 접근이 가능하다.


5. 추상 클래스
정의 : 상속받은 클래스들에서 공통으로 사용되는 메서드의 구현을 부모 클래스에서 정의하지는 않지만 상속받는 각
클래스에서 각 메서드를 구현하도록 강제하는 것 => 추상 클래스

특징
5-1. abstract 키워드를 붙여서 추상 메서드를 만든다.

5-2. 추상 메서드가 하나라도 있다면 abstract 키워드는 class 앞에도 붙여야 한다.

5-3. 추상 메서드는 본문이 없어야 하기에 중괄호를 삭제하고 반환 타입을 지정한다.

5-4. 추상 클래스가 되면 인스턴스 생성이 불가능해진다.


6. 싱글톤 & 개인 생성자
정의 : 한 클래스의 인스턴스를 정확히 1개만 생성가능하도록 한다. => 싱글톤 패턴

특징
6-1. private 키워드를 이용해 constructor 앞에 붙인다. => new를 사용해 인스턴스 생성이 불가능해진다.

6-2. private 키워드를 constructor 키워드 앞에 붙인다.
=> new 로직을 통해 인스턴스 생성 불가

6-3. private static instance : className
=> private 정적 프로퍼티 설정으로 클래스 내에서만 접근가능한 정적 프로퍼티로 만든다.

6-4. getInstance라는 메서드를 만들어서 6-3이 존재하면 그것을 반환하고 없다면 임의로 만든 new 로직 객체를 반환한다.







