1. Lodash - TS
1-1. TS 파일은 JS로 이루어진 라이브러리를 인식하지 못한다.
=> TS가 컴파일이 되어 JS로 변환되는 것이다. 반대로 적용되면 당연히 실패한다.

1-2. npm install --save-dev @types/lodash
=> ts에서도 이해할 수 있게 변환 파일이 설치된다.

** 유명한 Library들은 가지고 타입 변환 라이브러리도 존재한다.


2. class-transformer
2-1. TS에서 클래스 정의하고 서버에서 데이터 받고 라이브러리 메서드를 호출하면 자동으로 데이터를 
올바른 모델로 변환한다.
2-2. class-transformer docs => 명령어
2-3. 주로 JSON 데이터 [{}, {}, {}, {}]로 된 데이터를 클래스나 생성자 함수의 인자로 받아들여서 인스턴스화 한다.


3. class-validator
3-1. 클래스의 데코레이터를 이용해 유효성 검사를 해준다.
3-2. class-validator docs => 설치 명령어
3-3. import {IsNotEmpty, IsNumber, IsPositive} from 'class-validator'
=> 클래스, 속성, 메서드에 알아서 사용하면 된다.
3-4. import {validate} from 'class-validator';
=> validate(인스턴스) => validator 라이브러리의 데코레이터넣은 부분의 유효성 검사를 한 결과를 promise로 전달한다.


*** class-validator => 데코레이터를 이용한 유효성 검사 라이브러리, TS로 만들어졋다.
*** @types/.. => 타입스크립트에서도 적용되게 하고 싶다.


4. .d.ts file
4-1. type을 정의(declare)하기 위해서 존재하는 파일이다.
=>기존 JavaScript로 만들어진 서드파티 모듈들을 TypeScript 환경에서도 사용할 수 있도록 따로 타입만 정리해서 넣어둔 파일

4-2. @types가 붙은 모듈들이 타입 선언만 포함된 모듈이다.

4-3. .d.ts 파일은 타입의 선언만 존재해야 한다. =>ambient이라고 한다.

4-4. declare 
=> 컴파일러에게 해당 변수나 함수의 존재 여부를 알릴 수 있고, 또한 해당 내용들은 JS코드로 컴파일되지 않고 
TS 컴파일러에게 타입 정보를 알릴 수 있다.






