1. 클래스란?

1-1. OOP (객체지향 프로그래밍)
=> 실제 세계의 사물이나 구체적인 어떤 것을 통해 객체를 생성하고 객체 중심으로 코드를 작성하는 것

1-2. Class => OOP
=> Class를 통해 객체를 생성하고 정의한다.
=> 클래스 기반으로 객체를 생성하면 해당 객체를 인스턴스라고 부른다.


2. First Class

2-1. constructor
=> 클래스를 기반으로 생성한 객체에 연결되는 함수이며, 객체가 생성될 떄 실행된다.
=> 객체의 초기화 작업

2-2. JS, TS는 Class 기능을 통해서 객체를 정의하고 생성할 수 있는 블루프린트를 준다.
=> 그러나 TS 컴파일 버전이 낮아 Class가 아닌 생성자 함수만 지원되는 버전이 존재한다.

2-3. constructor 안쪽에서 필드를 지정하지 않고 외부에 필드를 지정하는 기술 => JS의 높은 버전
=> 외부의 필드를 지정해야만 constructor의 변수가 될 수 있다.
=> 외부의 필드이지만 constructor의 변수가 아닌 경우는 default값을 줘야한다.

** 외부 필드는 key/ constructor의 매개변수는 value를 설정하는 것이다.


3. 생성자 함수 및 this 키워드

3-1. 클래스 메서드의 본문에서 변수를 찾을 떄 지역 스코프에서 찾거나 클래스 밖의 전역 스코프에서 찾는다.

3-2. this를 사용하면 클래스로 생성된 인스턴스를 참조한다.

3-3. 클래스 메서드를 생성할 떄 매개변수에 this : className을 줄 수 있다.
=> 메서드의 this의 타입을 지정한 것이다.
=> 메서드의 this의 참조값이 정의한 class를 벗어나면 error처리한다.


4. 개인 및 공용 엑세스 수정자

4-1. filed에 private => 클래스안에서, 클래스에서 지정된 메서드 내에서 필드를 조작할 수 있다.
=> obj.name = 'HWT' => 이런 접근이 불가능해진다는 것이다.

4-2. public => default, 외부에서 엑세스할 수 있다.

4-3. 타입스크립트에서만 지원한다. => TS 컴파일 할 떄 걸리는 것이다. JS는 아직 private, public이 없다.


5. 약식 초기화

5-1. 약식 초기화 => 필드를 최소화하여 constructor의 매개변수를 이용하는 방법

5-2. constructor(private name : string, public age : number){

} => 매개변수에 모든 것을 설정하는 방법이다.

** constructor의 매개변수에 외부의 필드 + value를 모두 설정하는 방법이다.


6. 읽기전용 속성
변수 이름 앞에 readonly를 붙인 변수는 객체로 생성된 이후에 변경이 불가능해진다.







