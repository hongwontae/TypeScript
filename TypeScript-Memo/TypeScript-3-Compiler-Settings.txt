1. 관찰 모드 사용하기
npm start를 통해 lite-server를 사용한 뒤 ts 파일의 변동사항 떄마다 tsc app.ts를 명시적으로 명령해야 수정되었다.

tsc fileName.ts --watch(-w) => 자동으로 변동사항이 컴파일되고 브라우저에 적용된다.
=> 다만 이 명령어는 한 파일만 가능하다.


2. 전체 프로젝트 컴파일/ 다수의 파일
2-1. tsc --init => 타입스크립트 프로젝트로 초기화하는 명령어
2-2. tsc --watch (-w) => 타입스크립트 프로젝트 파일을 모두 감시한다. (변동사항 자동 적용)


3. tsconfig.json

3-1. exclude : [] => ts 컴파일 제외할 폴더나 파일
(typeScript init을 실행하면 자동적으로 node_modules은 컴파일의 대상이 되지 않는다.)

3-2. include : [] => ts 컴파일 포함할 폴더나 파일
(기본 설정은 node_modules을 제외한 모든 파일.js을 컴파일 하는 것이다. 그러나 include에 포함된 폴더나 파일이 하나라도
있는 경우에는 해당 폴더, 해당 파일만 컴파일의 대상이 된다.)
3-3. files : [] => ts 컴파일 포함할 파일 (폴더 x)

3-3. target : "es..."
=> ts을 컴파일하여 JS로 만들 떄 JS의 시점
=> 기본 버전은 모든 변수들이 var로 설정되었다. es6로 바꾸면 let이나 const가 그대로 JS로 컴파일된다.

3-5. lib : []
=> TS의 객체 및 기능, 기본값을 지정할 수 있는 option이다.
=> default는 JS target(3-5)에 따라 달라진다.
=> lib : ["dom", "es6"..] => ts는 dom을 사용 가능, ts는 es6을 사용 가능

3-6.allowJs
=> JS가 아닌 파일도 TS 기능으로 컴파일한다.

3-7. checkJs
=> 컴파일하지 않지만 구문 검사, 잠재적 오류를 보고한다.

3-8. sourceMap : boolean
=> sourceMap이 true을 가지면 컴파일 시점에 js.map 파일이 생성되고 브라우저에 ts 파일도 전송된다.
=> 브라우저로 보내진 ts파일을 디버깅할 수 있다.

3-9. outDir : "path"
=> 컴파일된 파일의 위치를 지정할 수 있다.
=> 이 떄 ts파일의 폴더 구조도 복제하여 outDir의 path에 반영된다.

3-10. rootDir : "path"
=> 컴파일할 ts 파일을 규정하고 그 외의 폴더+파일들을 무시하는 설정

3-11. removeComments : boolean
=> true value라면 ts의 주석이 컴파일 된 파일의 js 주석으로 가지 않는다.

3-12. noEmit : boolean
=> true value라면 JS 파일을 생성하지 않는다.

3-13. noEmitOnError : false 
=> false가 default이다. => 오류가 발생해도 JS를 생성한다.
=> true면 에러가 발생하면 파일을 생성하지 않는다.


4. Strict Compile
4-1. strict => TS 파일을 타입 체크 설정이다. strict 하나만 true이면 포함되는 모든 속성을 사용할 수 있다.

4-2. noImplicitAny => 매개변수의 타입을 지정하지 않으면 에러

4-3. strictNullChecks : true => 잠재적으로 null이 될 수 있는 값이 존재하면 에러
(!연산자 : null이 아닌 값이 반환된다고 ts에게 알리는 연산자)

4-4. strictBindCallApply
=> bind, call, applye가 호출되면 설정 내용이 타당한지 확인하는 설정이다.

4-5. noImplicitThis
=> 무엇을 참조하는지 분명하지 않은 곳에서 this를 사용하면 에러

4-6. alwaysStrict
=> 생성되는 JS 파일이 strict 모드를 사용하도록 제어한다.

4-7. noUnusedLocals
=> 사용하지 않는 지역 변수가 있다면 에러

4-8. noUnusedParameters
=> 사용하지 않는 매개변수가 존재하면 에러

4-9. noImplicitReturns
=> 어떤 함수가 한 분기에서 return을 사용하지만 다른 분기에서 return을 사용하지 않는다면 에러
=> function 안에 if문의 return이 존재하면 else의 경우도 return을 줘야한다.


















