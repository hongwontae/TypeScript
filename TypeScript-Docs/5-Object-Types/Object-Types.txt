1. Object-Types
=> TS에서 객체의 타입을 설정할 수 있다.


2. Object-Types
2-1. let person : {name : string, age number};

2-2. interface ObjectTypes{
    name : string;
    age : number;
};
let kk : ObjectTypes = {...}

2-3. Type Person = {
    name : string;
    age : number;
}

=> 익명, 인터페이스, 타입 alias로 객체의 타입을 지정할 수 있다.


3. Property Modifiers(인터페이스, 클래스, Type-Alias에서 프로퍼티에 대한 제어, 기능 키워드 설정)

3-1. Optional Properties
=> 변수명 마지막에 ?을 붙여서 해당 프로퍼티의 추가는 선택사항이라고 표현할 수 있다.

3-2. readonly
=> 초기화된 이후 값을 변경하지 못하도록 강제하는 키워드
=> 변수명 앞에 readonly 키워드를 넣는다.
=> 콜 스택 주소값을 변경하지 않는 참조값 변경은 허용한다.

3-3. Index Signatures
=> 객체의 프로퍼티 전체가 따라야 할 규칙을 의미한다.
=> [props : string] : string | number => 모든 프로퍼티의 이름은 string 타입, 값은 문자열 or 숫자여야 한다.


4. 인터페이스 extneds
4-1. 인터페이스끼리의 extends는 여러개가 가능하다.
4-2. 타입을 지정받은 곳은 연장된 인터페이스의 타입도 고려해야 한다.


5. Intersection Types
5-1. 인터페이스, type-Alias에서 사용할 수 있는 개념이다. &을 사용한다.
5-2. 





